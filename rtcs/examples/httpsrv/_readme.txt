                          HTTP server application

Content
-------
1. Introduction.
2. Application configuration.
3. Running the application.
4. Using the application.
4.1 Modifying content of static web pages.
4.2 Content generated by CGIs.
4.3 WebSocket Chat Client.
4.4 WebSocket Echo.
4.5 Secure HTTP server using CyaSSL.



1. Introduction
---------------
This is the RTCS example that is used to demonstrate different features of the 
RTCS HTTP server. The example allows to start one or more HTTP servers on IPv4 
and/or IPv6 addresses, demonstrating use of both static and dynamic web pages
with CGI and server WebSocket plugin.

1.1 Content of example directory
--------------------------------
Example directory consist of following folders and files:
  - build: This folder contains IDE projects and project configuration.
  - chat_client: Contains a simple WebSocket chat client implemented in 
                  javascript.
  - filesystem: 
    - web: A folder containing TFS files from which HTTP server content is 
          generated.
    - ssl: A folder containing certificates for SSL library/web server.
  - _readme.txt: This README file.
  - cgi.c: Source code of CGI/SSI callbacks.
  - config.h: Configuration of example.
  - example_plugins.c: Source code of WebSocket plugins.
  - example_plugins.h: Header file for WebSocket plugins.
  - httpsrv_main.c: Main source file including IP address configuration and 
                     HTTP server startup.
  - mktfs.bat: Batch file for generating Trivial File System (TFS) with the 
                HTTP server content.
  - tfs_data.c: Source file generated by mktfs.bat from folder web_pages. This 
                 file contains content server by the HTTP server.

2. Application configuration
----------------------------
This chapter contains description of all configuration options available in the 
HTTP server example.

2.1 Default Example Configuration
-------------------------
All example configuration is done in the file "config.h" in the example folder.
By default following configuration is used:

  - Board IPv4 addresses: 
    - interface 0: 192.168.1.202/24.
    - interface 1: 192.168.2.202/24.
  - Board IPv6 addresses (autoconfigured):
    - interface 0: link local address.
    - interface 1: link local address.
  - IPv6 scope ID: 0.
  - Server address family: all families enabled in the RTCS.
  - Server web pages are loaded from the TFS.
  - Server CGI stack size set to 3kB.
  - One server is running to serve requests from all interfaces.
  - Authentication is required for the file "auth.html".
    - username: developer
    - password: freescale
  - Two WebSocket plugins: echo and chat.

2.2 Configuration macros
------------------------
Following is list of configuration macros in file "config.h"

 - Server IP address is configurable with macros "A", "B", "C" and "D". Address
   is in format A.B.C.D for interface 0 and A.B.C+1.D for interface 1. 
 - Size of stack for CGI handler task can be set by macro HTTPSRV_EXAMPLE_CGI_STACK.
 - Number of parallel sessions handled by server is set by macro HTTPSRV_EXAMPLE_SESSIONS.
 - Macro HTTP_USE_ONE_SERVER defines if there should be one HTTP server for all
   interfaces (set to 1) or independent server for each interface (set to 0).
 - Macro ENET_IPMASK defines IPv4 network mask for all interfaces.
 - Macro HTTP_INET_AF defines which address families are used for HTTP server.
 - Macro HTTP_SCOPE_ID defines IPv6 scope ID.
 - Macro SSL_CERT_PATH defines path to certificate used by secure HTTP server.
 - Macro SSL_KEY_PATH defines path to private key used by secure HTTP server.
 - Macro HTTPSRV_PORT defines port on which HTTP server will be accessible.
 
2.3 To use WIFI on httpsrv example 
----------------------------------
Please follow steps below:
    1. By default, WIFI is disabled. To use WIFI, BSPCFG_ENABLE_<vendor>_WIFI 
       definition must be enabled in user_config.h. Be sure that the <vendor> 
       patch is installed.
    2. To run multiple web servers on httpsrv example, HTTP_USE_ONE_SERVER 
       definition must be disabled in <mqx_root>\rtcs\examples\httpsrv\config.h 
       and value of BSP_DEFAULT_MAX_MSGPOOLS must be big enough because each web 
       server requires one msg pool. Its value at least must be equals to number 
       of RTCS tasks and web servers.
    3. Build required libraries.
    4. Update WIFI configuration in config.h header file if necessary.
    5. Build example then run.
    
3. Running the application
--------------------------
1) Prepare your evaluation board according to the "MQX Getting started" document.
   Pay special attention to correct jumper settings.
2) Connect your PC to the evaluation board using a serial cable.
3) Connect the evaluation board and your PC to same Ethernet network.
4) Start Terminal application on your PC. 
   Set serial port settings to 115200 baud rate, no parity and 8 bits.
5) Compile all required libraries (BSP, PSP, RTCS).
6) Compile, load and run the application. Following message should show up in 
   the terminal window:  
    Starting http server No.0 on IP 192.168.1.202...[OK]

    Shell (build: Mar 25 2014)
    Copyright (c) 2013 Freescale Semiconductor;
    shell> 
    shell> 
7) The web server is now running and listening for connections.
8) Open web browser and type in the server address, index page will load.

4. Using the application
------------------------
This chapter contains information about usage of various HTTP server components 
demonstrated by the example.

4.1 Modifying content of static web pages
-----------------------------------------
To modify content available through the web server you must complete following 
steps:
  1. Modify, add or delete files in folder "web_pages".
  2. Run batch file "mktfs.bat" to generate updated "tfs_data.c".
  3. Re-compile HTTP server application example and download it to your board.  

4.2 Content generated by CGIs
-----------------------------
Content of some web pages is generated dynamically by CGI scripts on server side.
Source code of these scripts can be found in the file "cgi.c". On client side, 
dynamic content is handled and displayed by the JavaScript. A good example is 
content of the "poll.html": 
  1. Each second a file "rtcdata.cgi" is requested from the server by JavaScript
     using XMLHttpRequest.
  2. Requesting of this file causes calling of function "cgi_rtc_data()" on
     the server.
  3. In this function system time is read and sent back to client as string by 
     function "HTTPSRV_cgi_write()" in format HH\nMM\nSS\n.
  4. String is received by client, parsed by JavaScript and displayed on 
     the web page.
For detailed information about CGI processing please see 
chapter 5.9.6 "Using CGI Callbacks " in the RTCS User Guide document.

4.3 WebSocket Chat Client
-------------------------
The WebSocket chat client can be found in folder "chat_client". To start it up
open file "run.html" in your web browser and do following:

  1. Fill up your username.
  2. Fill up server IP address (192.168.1.202 by default).
  3. Click on the "connect" button.

After you are connected to the chat server a chat window is loaded together with
an input field, send and disconnect buttons. Now if you write any text into the 
input field and press either enter on your keyboard or the "send" button, your
message will be send to all connected clients together with time stamp and your 
name.
To disconnect from server simply click on the "disconnect" button. After you are
disconnected, invite screen will show up. Connection and disconnection of 
clients together with error messages can be monitored in the terminal window.

4.4 WebSocket Echo
------------------
This simple plugin echoes back any message (text or binary) it receives back to
the client. Received text messages are also printed to the terminal. In case of 
binary message only the information about the message length is printed. 
The WebSocket connection is kept open until the client closes it. Information 
about errors is printed to the terminal.

4.5 Secure HTTP server using CyaSSL
------------------------------------
  1. Modify hosts file (static DNS records).
   a) On windows OS open the file "C:\Windows\System32\drivers\etc\host".
   b) On Unix-like system open file "/etc/hosts"
  For location of hosts file in other operating systems see http://en.wikipedia.org/wiki/Hosts_(file)

  2. Add two following lines to it:
        <board_ipv4_ip_address>          board
        <board_ipv6_ip_address%SCOPE_ID> board

     You have to get SCOPE_ID value from output of "netsh interface ipv6 show interface"
     command in windows PC command line. Just find Idx value corresponding to 
     interface on which the Freescale board is connected and add it after the percent
     sign.
     This step will create static DNS record pointing all requests for "board" DNS 
     name to 192.168.1.202 and/or fe80::200:5eff:fea8:1ca.
  3. To connect to IPv4 address use Chrom(e/ium) browser, with URL https://board/.
  4. To connect to IPv6 address use Firefox browser. First go to URL about:config
     find setting named "network.dns.disableIPv6" and make sure it is set to 
     "false". Then you can access the server on https://board/.
  You can check which addresses are used with WireShark tool.

4.5.1 Hints 
-----------
   1. If you use Internet Explorer and web page seems broken, please disable 
      compatibility view for intranet web pages. For further information please 
      see: http://msdn.microsoft.com/en-us/library/ff955410(v=vs.85).aspx
   2. For generation of a private key and a self-signed certificate can be used 
      the OpenSSL tool: https://www.openssl.org/related/binaries.html.
      For example: openssl req -x509 -nodes -text -days 3650 -subj "/C=CZ/L=Roznov/O=Freescale/CN=board" -newkey rsa:2048 -keyout server_key.pem -out server_cert.pem -config "C:\OpenSSL-Win32\bin\openssl.cfg"
      More information about OpenSSL command: https://www.openssl.org/docs/apps/openssl.html

4.5.2 Known limitations
-----------------------
 - Secure HTTP server requires an additional memory and runs only on 
   platforms with at least 128kB of RAM.
 - SSL certificates are self-signed, this means that web browsers will report 
   them as suspicious.
 - For certificate to function properly for both IPv4 and IPv6 it must be 
   generated for hostname instead of IP address.
